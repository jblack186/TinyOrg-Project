[{"/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/index.js":"1","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/App.js":"2","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/reportWebVitals.js":"3","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/RecipeForm.js":"4","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/Announcebar.js":"5","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/Header.js":"6","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/RecipeList.js":"7"},{"size":580,"mtime":1628662958494,"results":"8","hashOfConfig":"9"},{"size":4265,"mtime":1628662958490,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1628662958494,"results":"11","hashOfConfig":"9"},{"size":869,"mtime":1628662958490,"results":"12","hashOfConfig":"9"},{"size":303,"mtime":1628662958490,"results":"13","hashOfConfig":"9"},{"size":256,"mtime":1628662958490,"results":"14","hashOfConfig":"9"},{"size":1984,"mtime":1628662958490,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"i7m7rf",{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/index.js",[],"/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/App.js",["33","34","35","36","37","38"],"import './App.css';\nimport { Route, useHistory } from \"react-router-dom\";\nimport React, { useState, useEffect } from \"react\";\nimport Header from './components/Header';\nimport Announcebar from './components/Announcebar'\nimport RecipeForm from './components/RecipeForm';\nimport RecipeList from './components/RecipeList';\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [recipes, setRecipes] = useState([]);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [childFirstName, setChildFirstName] = useState(\"\");\n  const [childLastName, setChildLastName] = useState(\"\");\n  const [allergies, setAllergies] = useState([]);\n  const [allergenList, setAllergenList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [tempAllergies, setTempAllergies] = useState(['milk']);\n\n  const history = useHistory();\n\n  const getAllergies = () =>  {\n    axios.get('https://60f5adf918254c00176dffc8.mockapi.io/api/v1/allergens/')\n    .then(res => {\n      res.data.forEach(item => {\n       setAllergenList(allergenList => [...allergenList, <option value={item.name}  >{item.name}</option>])\n  \n      })\n  \n  })\n  }\n  \n  useEffect(() => {\n  \n    getAllergies();\n    \n  \n  }, [])\n  \n\nconst getRecipes = () =>  {\n  axios.get('https://60f5adf918254c00176dffc8.mockapi.io/api/v1/recipes/')\n  .then(res => {\n    setRecipes(res.data)\n\n})\n}\nconst sendRecipes = () => {\naxios.post('/api/recipes-list/', {recipes: recipes})\n  .then(res => {\n    console.log(res)\n  })\n  .catch(err => {\n    console.log(err)\n  })\n}\n\nuseEffect(() => {\n  \n\n  getRecipes();\n\n\n}, [])\n\n\n\nconst handleSubmit = async (event) => {\n  event.preventDefault();\n  // sendRecipes();\n  let newCustomer =  {\n    first_name: firstName,\n    last_name: lastName,\n    email: email,\n    child_first_name: childFirstName,\n    child_last_name: childLastName,\n    allergies: allergies.join(',')\n  }\n  await axios\n    .post(\"/api/customers/\", newCustomer)\n    .then((res) => {\n      console.log(res)\n      history.push('/recipes')\n    })\n      .catch((err) => {\n        console.log(err);\n      })\n\n}\nconsole.log(recipes)\n\nconst newCustomerForm = <form className=\"form__content__form\" onSubmit={handleSubmit}>\n<label>\n  *First Name\n  <input\n    name=\"first name\"\n    type=\"name\"\n    value={firstName}\n    onChange={(e) => setFirstName(e.target.value)}\n    required\n  />\n</label>\n\n<label>\n  *Last Name\n  <input\n    name=\"last name\"\n    type=\"name\"\n    value={lastName}\n    onChange={(e) => setLastName(e.target.value)}\n    required\n  />\n</label>\n<label>\n  *Email\n  <input\n    name=\"email\"\n    type=\"email\"\n    value={email}\n    onChange={(e) => setEmail(e.target.value)}\n    required\n\n  />\n</label>\n\n<label>\n  *Child First Name\n  <input\n    name=\"child first name\"\n    type=\"name\"\n    value={childFirstName}\n    onChange={(e) => setChildFirstName(e.target.value)}\n    required\n  />\n</label>\n<label>\n  *Child Last Name\n  <input\n    name=\"child last name\"\n    type=\"name\"\n    value={childLastName}\n    onChange={(e) => setChildLastName(e.target.value)}\n    required\n  />\n</label>\n<label>\nWhat allergies does your child have? \n<select onChange={(e) =>{return  setAllergies(allergies => [...allergies, e.target.value] ) }}>\n<option value=\"none\" selected disabled hidden>\n          Select an Option\n      </option>\n{allergenList}\n  </select>\n  </label>\n  <button type=\"submit\">Show Recipes</button>\n</form>\n\n\n\n// checking selected allergens on filter\n\n  return (\n    <div className=\"container\">\n      <header className=\"container__header\">\n      <Announcebar />\n      <Header />\n      </header>\n      <Route\n        exact\n        path=\"/\"\n        render={(props) => {\n          return <RecipeForm handleSubmit={handleSubmit} firstName={firstName} lastName={lastName} email={email} childFirstName={childFirstName} childLastName={childLastName} allergies={allergies} allergenList={setAllergenList} newCustomerForm={newCustomerForm} />\n          ;\n        }}\n      />\n      <Route\n        exact\n        path=\"/recipes\"\n        render={(props) => {\n          return <RecipeList recipes={recipes} allergies={allergies}/>;\n        }}\n      />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/reportWebVitals.js",[],"/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/RecipeForm.js",["39","40"],"import React, { useState, useEffect } from \"react\";\nimport \"../css/Form.scss\";\nimport Baby from '../img/baby-eating.jpeg';\n\nconst RecipeForm = (props) => {\n  return (\n    <div className=\"form\">\n      <img className=\"form__image\" src={Baby} alt=\"baby eating\" />\n      <div className=\"form__content\">\n        <h1 className=\"form__content__heading\">\n          Build your little one's <br /> personalized menu.\n        </h1>\n        <p className=\"form__content__body\">\n          View recommended recipes, meal plans and pricing. Don't worry, this\n          takes less than 60 seconds.\n        </p>\n        {props.newCustomerForm}\n      </div>\n      <div className=\"form__allergies\">\n      {props.allergies && props.allergies.map(item => {\n        return <p className=\"form__allergies__item\">{item}!</p>\n      })}\n      </div>\n    </div>\n  );\n};\n\nexport default RecipeForm;\n","/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/Announcebar.js",[],"/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/Header.js",[],"/Users/jamie/Documents/Tiny Organics Project/TinyOrganic-Deploy/to-project/project/frontend/src/components/RecipeList.js",["41","42","43","44"],"import React, { useState, useEffect } from \"react\";\nimport \"../css/RecipeList.scss\";\nimport axios from \"axios\";\nimport svgBaby from '../img/baby-boy.svg';\nimport Danger from '../img/danger.svg';\nimport Ribbon from '../img/ribbon-for-an-angle.svg';\n\nconst RecipeList = (props) => {\n  const [recipes, setRecipes] = useState([]);\n  const [allergies, setAllergies] = useState(props.allergies);\n  const [loading, setLoading] = useState(true)\n\n\n  \n  console.log('rop', props.recipes)\n  function checkAllergy(allRecipes) {\n    const safeRecipes = allRecipes.filter(recipe => !recipe.allergens.find(allergy => allergies.includes(allergy) ));\nreturn safeRecipes\n}\n\n\n  useEffect(() => {\n    axios.get('/api/recipes-list/')\n  .then(res => {\n    let safeRecipes = checkAllergy(props.recipes)\n    console.log('safe', safeRecipes)\n   setRecipes(safeRecipes)\n   \n  })\n  .catch(err => {\n    console.log(err)\n  })\n  }, [props])\n  console.log('recipes',recipes)\n  console.log('allergies', allergies)\n\n\n  return (\n    <div className=\"list\">\n      <div className=\"list__box\">\n      {recipes.map(item => {\n        return <div className={`list__box__allergies list__box__allergies--${item.id}`}>\n              <img className=\"list__box__allergies__img list__box__allergies__img--ribbon\" src={Ribbon} alt=\"ribbon\" />\n              <img className=\"list__box__allergies__img\" src={svgBaby} alt=\"baby\" />\n              <h3 className=\"list__box__allergies__heading\" >{item.name}</h3>\n               <div className=\"list__box__allergies__body\" ><img className=\"list__box__allergies__img list__box__allergies__img--danger\" src={Danger} alt=\"danger\" />\n{ item.allergens.length > 0 ? item.allergens.map(allrgy => {\n                 return <p>{allrgy}</p>\n               }) : <p>none</p>}</div>\n<button className={`list__box__allergies__button list__box__allergies__button--${item.id}`} >Learn More</button>\n               </div>\n               \n      })}\n      </div>\n    </div>\n  );\n};\n\nexport default RecipeList;\n",{"ruleId":"45","severity":1,"message":"46","line":9,"column":10,"nodeType":"47","messageId":"48","endLine":9,"endColumn":14},{"ruleId":"45","severity":1,"message":"49","line":22,"column":10,"nodeType":"47","messageId":"48","endLine":22,"endColumn":19},{"ruleId":"45","severity":1,"message":"50","line":22,"column":21,"nodeType":"47","messageId":"48","endLine":22,"endColumn":33},{"ruleId":"45","severity":1,"message":"51","line":23,"column":10,"nodeType":"47","messageId":"48","endLine":23,"endColumn":23},{"ruleId":"45","severity":1,"message":"52","line":23,"column":25,"nodeType":"47","messageId":"48","endLine":23,"endColumn":41},{"ruleId":"45","severity":1,"message":"53","line":53,"column":7,"nodeType":"47","messageId":"48","endLine":53,"endColumn":18},{"ruleId":"45","severity":1,"message":"54","line":1,"column":17,"nodeType":"47","messageId":"48","endLine":1,"endColumn":25},{"ruleId":"45","severity":1,"message":"55","line":1,"column":27,"nodeType":"47","messageId":"48","endLine":1,"endColumn":36},{"ruleId":"45","severity":1,"message":"56","line":10,"column":21,"nodeType":"47","messageId":"48","endLine":10,"endColumn":33},{"ruleId":"45","severity":1,"message":"57","line":11,"column":10,"nodeType":"47","messageId":"48","endLine":11,"endColumn":17},{"ruleId":"45","severity":1,"message":"58","line":11,"column":19,"nodeType":"47","messageId":"48","endLine":11,"endColumn":29},{"ruleId":"59","severity":1,"message":"60","line":33,"column":6,"nodeType":"61","endLine":33,"endColumn":13,"suggestions":"62"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'tempAllergies' is assigned a value but never used.","'setTempAllergies' is assigned a value but never used.","'sendRecipes' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'setAllergies' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkAllergy'. Either include it or remove the dependency array.","ArrayExpression",["63"],{"desc":"64","fix":"65"},"Update the dependencies array to be: [checkAllergy, props]",{"range":"66","text":"67"},[902,909],"[checkAllergy, props]"]